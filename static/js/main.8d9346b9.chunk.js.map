{"version":3,"sources":["components/phonebook/PhonebookMain.jsx","components/contactList/ContactList.jsx","components/filter/Filter.jsx","App.js","index.js"],"names":["Phonebook","onSubmit","useState","name","number","state","setState","handleChange","e","currentTarget","value","prevState","reset","preventDefault","id","generate","className","type","onChange","pattern","title","required","ContactList","listContact","onDelete","map","onClick","Filter","filter","App","contacts","useEffect","getContacts","window","localStorage","getItem","arrContacts","JSON","parse","setItem","stringify","data","some","contact","alert","item","toLowerCase","includes","handleFilter","newContactsList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d9346b9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { generate } from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./PhonebookMain.css\";\r\n\r\nconst Phonebook = ({ onSubmit }) => {\r\n  const [state, setState] = useState({\r\n    name: \"\",\r\n    number: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const id = generate();\r\n    const { name, number } = state;\r\n    const newContact = { id, name, number };\r\n    onSubmit(newContact);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  const { name, number } = state;\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form\">\r\n          <label>Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={handleChange}\r\n            className=\"input\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n          <label>Number</label>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={handleChange}\r\n            className=\"input\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n          <button type=\"submit\" className=\"btn\">\r\n            Add contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Phonebook;\r\n\r\nPhonebook.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ContactList.css\";\r\n\r\nconst ContactList = ({ listContact, onDelete }) => {\r\n  return (\r\n    <ul className=\"contacts\">\r\n      {listContact.map(({ name, id, number }) => {\r\n        return (\r\n          <li key={id}>\r\n            {name}: {number}\r\n            <button onClick={() => onDelete(id)} type=\"button\" className=\"btn\">\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n  listContact: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Filter.css\";\r\n\r\nconst Filter = ({ handleChange, filter }) => {\r\n  return (\r\n    <div>\r\n      <label className=\"label\">Find contacts by name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={handleChange}\r\n        className=\"input\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n};\r\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Phonebook from \"./components/phonebook/PhonebookMain.jsx\";\nimport ContactList from \"./components/contactList/ContactList.jsx\";\nimport Filter from \"./components/filter/Filter.jsx\";\n\nconst App = () => {\n  const [state, setState] = useState({\n    contacts: [],\n    filter: \"\",\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    setState((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const formSubmitHandler = (data) => {\n    const { contacts } = state;\n    const availability = contacts.some((contact) => contact.name === data.name);\n\n    if (availability !== true) {\n      setState((prevState) => {\n        return { ...prevState, contacts: [...prevState.contacts, data] };\n      });\n    } else {\n      alert(\"Already in book!\");\n      return;\n    }\n  };\n\n  const handleFilter = () => {\n    const { filter, contacts } = state;\n    const filteredContacts = contacts.filter((item) =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  };\n\n  const handleDelete = (id) => {\n    setState((prevState) => {\n      const copyContactsList = [...prevState.contacts];\n      const newContactsList = copyContactsList.filter(\n        (contact) => contact.id !== id\n      );\n      return { ...prevState, contacts: newContactsList };\n    });\n  };\n\n  useEffect(() => {\n    const getContacts = window.localStorage.getItem(\"contacts\");\n    const arrContacts = JSON.parse(getContacts);\n    arrContacts &&\n      setState((prevState) => ({\n        ...prevState,\n        contacts: arrContacts,\n      }));\n  }, []);\n\n  useEffect(() => {\n    window.localStorage.setItem(\"contacts\", JSON.stringify(state.contacts));\n  }, [state.contacts]);\n\n  return (\n    <div className=\"conteiner\">\n      <h1>Phonebook</h1>\n      <Phonebook onSubmit={formSubmitHandler} />\n      <h2>Contacts</h2>\n      <Filter handleChange={handleChange} filter={state.filter} />\n      <ContactList listContact={handleFilter()} onDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}